{"version":3,"sources":["component/listview/index.js","component/tableview/index.js","component/controller/search.js","component/controller/filter.js","component/controller/view.js","component/controller/bulk.js","component/controller/index.js","component/todo-form/index.js","component/todo/index.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","todo","toggleSelect","toggleComplete","ListGroupItem","className","CustomInput","type","id","checked","isSelected","onChange","title","time","toDateString","Button","color","isCompleted","onClick","ListView","todos","ListGroup","map","key","TableItem","scope","TableView","Table","Search","term","searchHandler","toggleForm","Input","placeholder","value","e","target","Filter","filterHandler","ButtonGroup","View","view","changeView","Label","for","name","Bulk","clearSelected","clearCompleted","reset","Controller","Row","Col","md","size","CreateForm","state","description","changeHandler","event","setState","submitHandler","preventDefault","props","createTodo","text","Form","onSubmit","this","FormGroup","React","Component","Todo","Date","isOpenTodoForm","searchTerm","filter","todoId","find","singleTodo","shortid","generate","st","performSearch","toLowerCase","includes","performFilter","getView","Modal","isOpen","toggle","ModalHeader","ModalBody","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7cb3dbe.chunk.js","sourcesContent":["import React from 'react'\r\nimport {ListGroup,ListGroupItem,CustomInput,Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ListItem = ({todo,toggleSelect,toggleComplete}) =>(\r\n    <ListGroupItem className='d-flex align-items-center'>\r\n        <CustomInput\r\n            type='checkbox'\r\n            id={todo.id}\r\n            checked={todo.isSelected}\r\n            onChange={()=>toggleSelect(todo.id)}\r\n        />\r\n        <div className='mx-3'>\r\n            <h4>{todo.title}</h4>\r\n            <p>{todo.time.toDateString()}</p>\r\n        </div>\r\n        <Button className='ml-auto' color={todo.isCompleted ? 'danger' : 'success'} onClick={()=>toggleComplete(todo.id)}>\r\n            {todo.isCompleted ? 'Done' : 'Running'}\r\n        </Button>\r\n    </ListGroupItem>\r\n)\r\n \r\nListItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired\r\n}\r\n\r\nconst ListView = ({todos,toggleSelect,toggleComplete}) =>(\r\n    <ListGroup>\r\n        {todos.map(todo=>(\r\n            <ListItem \r\n                key={todo.id}\r\n                todo={todo}\r\n                toggleSelect={toggleSelect}\r\n                toggleComplete={toggleComplete}\r\n            />\r\n        ))}\r\n    </ListGroup>\r\n)\r\n\r\nListItem.propTypes = {\r\n    todos: PropTypes.object.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ListView","import React from 'react'\r\nimport {CustomInput,Button, Table} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TableItem = ({todo,toggleSelect,toggleComplete})=>(\r\n    <tr>\r\n        <th scope='row'>\r\n            <CustomInput \r\n                type='checkbox'\r\n                id={todo.id}\r\n                checked={todo.isSelected}\r\n                onChange={()=>toggleSelect(todo.id)}\r\n            />\r\n        </th>\r\n        <td>\r\n            {todo.time.toDateString()}\r\n        </td>\r\n        <td>\r\n            {todo.title}\r\n        </td>\r\n        <td>\r\n            <Button color={todo.isCompleted ? 'danger' : 'success'} onClick={()=> toggleComplete(todo.id)}>\r\n                {todo.isCompleted ? 'Done' : 'Running'}\r\n            </Button>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nTableItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired\r\n}\r\n\r\nconst TableView = ({todos,toggleSelect,toggleComplete}) =>(\r\n    <Table >\r\n        <thead>\r\n            <tr>\r\n                <th >Select</th>\r\n                <th>Time</th>\r\n                <th>ToDo</th>\r\n                <th>Action</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {todos.map(todo=>(\r\n                <TableItem \r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    toggleSelect={toggleSelect}\r\n                    toggleComplete={toggleComplete}\r\n                />\r\n            ))}\r\n        </tbody>\r\n    </Table>\r\n)\r\n\r\nTableView.propTypes = {\r\n    todos: PropTypes.object.isRequired,\r\n    toggleSelect: PropTypes.func.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TableView","import React from 'react'\r\nimport {Input,Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Search = ({term,searchHandler,toggleForm}) =>(\r\n    <div className='d-flex'>\r\n        <Input \r\n            placeholder='Search your task'\r\n            className='mr-3'\r\n            value={term}\r\n            onChange={e => searchHandler(e.target.value)}\r\n        />\r\n        <Button color='success' onClick={toggleForm}>\r\n            New\r\n        </Button>\r\n    </div>\r\n)\r\n\r\nSearch.propTypes = {\r\n    term: PropTypes.string.isRequired,\r\n    searchHandler: PropTypes.func.isRequired,\r\n    toggleForm: PropTypes.func.isRequired \r\n}\r\n\r\nexport default Search\r\n","import  React from 'react'\r\nimport {ButtonGroup,Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Filter = ({filterHandler}) =>(\r\n    <ButtonGroup>\r\n        <Button onClick={()=>filterHandler('all')}>All</Button>\r\n        <Button onClick={()=>filterHandler('running')}>Running</Button>\r\n        <Button onClick={()=>filterHandler('done')}>Completed</Button>\r\n    </ButtonGroup>\r\n)\r\nFilter.propTypes = {\r\n    filterHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Filter","import  React from 'react'\r\nimport {Label,CustomInput} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst View = ({view,changeView}) =>(\r\n    <div className='d-flex'>\r\n        <Label for='list-view' className='mr-4'>\r\n            <CustomInput \r\n                className='d-inline-block'\r\n                type='radio'\r\n                name='view'\r\n                value='list'\r\n                id='list-view'\r\n                onChange={changeView}\r\n                checked={view === 'list'}\r\n            /> List View\r\n        </Label>\r\n        <Label for='table-view' className='mr-4'>\r\n            <CustomInput \r\n                className='d-inline-block'\r\n                type='radio'\r\n                name='view'\r\n                value='table'\r\n                id='table-view'\r\n                onChange={changeView}\r\n                checked={view === 'table'}\r\n            /> Table View\r\n        </Label>\r\n\r\n    </div>\r\n)\r\nView.propTypes = {\r\n    view: PropTypes.string.isRequired,\r\n    changeView: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default View","import  React from 'react'\r\nimport {ButtonGroup,Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Bulk = ({clearSelected,clearCompleted,reset}) =>(\r\n    <ButtonGroup>\r\n        <Button color='danger' onClick={clearSelected}>Clear Selected</Button>\r\n        <Button color='danger' onClick={clearCompleted}>Clear Completed</Button>\r\n        <Button color='danger' onClick={reset}>Reset</Button>\r\n    </ButtonGroup>\r\n)\r\n\r\nBulk.propTypes = {\r\n    clearSelected: PropTypes.func.isRequired,\r\n    clearCompleted: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Bulk","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Col,Row} from 'reactstrap'\r\n\r\nimport Search from './search'\r\nimport Filter from './filter'\r\nimport View from './view'\r\nimport Bulk from './bulk'\r\n\r\nconst Controller = ({term,searchHandler,toggleForm,filterHandler,changeView,view,clearCompleted,clearSelected,reset}) =>(\r\n    <div>\r\n        <Search \r\n            term={term}\r\n            searchHandler={searchHandler}\r\n            toggleForm={toggleForm}\r\n        />\r\n        <Row className='my-4'>\r\n            <Col md={{size:4}}>\r\n                <Filter filterHandler={filterHandler}/>\r\n            </Col>\r\n            <Col md={{size:4}}>\r\n                <View view={view} changeView={changeView}/>\r\n            </Col>\r\n            <Col md={{size:4}} className='d-flex'>\r\n                <div className='ml-auto'>\r\n                    <Bulk clearSelected={clearSelected} clearCompleted={clearCompleted} reset={reset} />\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n)\r\n\r\nController.propTypes = {\r\n    term: PropTypes.string.isRequired,\r\n    view: PropTypes.string.isRequired,\r\n    searchHandler: PropTypes.func.isRequired,\r\n    toggleForm: PropTypes.func.isRequired,\r\n    filterHandler: PropTypes.func.isRequired,\r\n    changeView: PropTypes.func.isRequired,\r\n    clearSelected: PropTypes.func.isRequired,\r\n    clearCompleted: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Controller\r\n","import React from 'react'\r\nimport {Form,FormGroup, Label, Input, Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CreateForm extends React.Component{\r\n    state = {\r\n        title: '',\r\n        description: ''\r\n    }\r\n    changeHandler = event =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    submitHandler = event =>{\r\n        event.preventDefault()\r\n        this.props.createTodo(this.state)\r\n        event.target.reset()\r\n        this.setState({text:'',description:''})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Form onSubmit={this.submitHandler}>\r\n                <FormGroup>\r\n                    <Label>Enter a Title</Label>\r\n                    <Input \r\n                        placeholder='Give a title'\r\n                        name='title'\r\n                        value={this.state.title}\r\n                        onChange={this.changeHandler}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label>Enter Description</Label>\r\n                    <Input \r\n                        placeholder='Give a description'\r\n                        type='textarea'\r\n                        name='description'\r\n                        value={this.state.description}\r\n                        onChange={this.changeHandler}\r\n                    />\r\n                </FormGroup>\r\n                <Button type='submit'>Create Task</Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nCreateForm.propTypes = {\r\n    createTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CreateForm","import React from 'react'\r\nimport {Modal,ModalBody,ModalHeader} from 'reactstrap'\r\nimport ListView from '../listview'\r\nimport TableView from '../tableview'\r\nimport Controller from '../controller'\r\nimport CreateForm from '../todo-form'\r\nimport shortid from 'shortid'\r\n\r\nclass Todo extends React.Component{\r\n    state = {\r\n        todo: [\r\n            {\r\n                id: 'dfdf3f',\r\n                title: 'Todo One',\r\n                description: 'Try a description',\r\n                time: new Date(),\r\n                isCompleted: false,\r\n                isSelected: false\r\n            },\r\n            {\r\n                id: 'dfdf4f',\r\n                title: 'Todo Two',\r\n                description: 'Try a description',\r\n                time: new Date(),\r\n                isCompleted: false,\r\n                isSelected: false\r\n            }\r\n        ],\r\n        isOpenTodoForm : false,\r\n        searchTerm: '',\r\n        view: 'list',\r\n        filter: 'all'\r\n}\r\n    toggleSelect = (todoId) =>{\r\n        const todos = [...this.state.todo]\r\n        const todo = todos.find(singleTodo => singleTodo.id === todoId)\r\n        todo.isSelected = !todo.isSelected\r\n        this.setState({todo:todos})\r\n    }\r\n    toggleComplete = (todoId) =>{\r\n        const todos = [...this.state.todo]\r\n        const todo = todos.find(singleTodo => singleTodo.id === todoId)\r\n        todo.isCompleted = !todo.isCompleted\r\n        this.setState({todo:todos})\r\n    }\r\n    searchHandler = value =>{\r\n        this.setState({searchTerm: value})\r\n    }\r\n    toggleForm = () =>{\r\n        this.setState({\r\n            isOpenTodoForm : !this.state.isOpenTodoForm\r\n        })\r\n    }\r\n    createTodo = todo =>{\r\n        todo.id = shortid.generate()\r\n        todo.time = new Date()\r\n        todo.isCompleted = false\r\n        todo.isSelected = false\r\n\r\n        const todos = [todo, ...this.state.todo]\r\n        this.setState({todo:todos})\r\n        this.toggleForm()\r\n\r\n    }\r\n    filterHandler = filter =>{\r\n        this.setState({filter})\r\n    }\r\n    changeView = event =>{\r\n        this.setState({\r\n            view : event.target.value\r\n        })\r\n    }\r\n    clearSelected =() =>{\r\n        const todos = this.state.todo.filter(st=> !st.isSelected)\r\n        this.setState({todo: todos})\r\n    }\r\n    clearCompleted =() =>{\r\n        const todos = this.state.todo.filter(st=> !st.isCompleted)\r\n        this.setState({todo: todos})\r\n    }\r\n    reset =() =>{\r\n        this.setState({\r\n            isOpenTodoForm : false,\r\n            searchTerm: '',\r\n            view: 'list',\r\n            filter: 'all'\r\n        })\r\n    }\r\n\r\n    performSearch = () => {\r\n       return this.state.todo.filter(st=>st.title.toLowerCase().includes(this.state.searchTerm.toLowerCase()))\r\n    }\r\n    performFilter = todos => {\r\n        let {filter} = this.state\r\n        if(filter === 'done'){\r\n            return todos.filter(todo=> todo.isCompleted)\r\n        }else if(filter === 'running') {\r\n            return todos.filter(todo=> !todo.isCompleted)\r\n        }else{\r\n            return todos\r\n        }\r\n    }\r\n\r\n    getView = ()=> {\r\n        let todos = this.performSearch()\r\n        todos = this.performFilter(todos)\r\n        return this.state.view === 'list' ? (\r\n            <ListView todos={todos} toggleSelect={this.toggleSelect} toggleComplete={this.toggleComplete}/>\r\n        ) : (\r\n            <TableView todos={todos} toggleSelect={this.toggleSelect} toggleComplete={this.toggleComplete}/>\r\n        )\r\n    }\r\n    render(){\r\n        return(\r\n            <div >\r\n                <h1 className='display-4 text-center mb-5'>My ToDo</h1>\r\n                <Controller \r\n                    term={this.state.searchTerm}\r\n                    view={this.state.view}\r\n                    searchHandler={this.searchHandler}\r\n                    toggleForm={this.toggleForm}\r\n                    filterHandler={this.filterHandler}\r\n                    changeView={this.changeView}\r\n                    clearSelected={this.clearSelected}\r\n                    clearCompleted={this.clearCompleted}\r\n                    reset={this.reset}\r\n                />\r\n                <div>\r\n                    {this.getView()}\r\n                </div>\r\n                <Modal\r\n                    isOpen={this.state.isOpenTodoForm}\r\n                    toggle={this.toggleForm}\r\n                >\r\n                    <ModalHeader toggle={this.toggleForm} >\r\n                        Create New Todo\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <CreateForm createTodo={this.createTodo}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo","import React from 'react';\nimport './App.css';\nimport {Container,Col,Row} from 'reactstrap'\nimport Todo from './component/todo/index'\n\nfunction App() {\n  return (\n    <Container className='my-3'>\n      <Row>\n        <Col>\n          <Todo/>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}